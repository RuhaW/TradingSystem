knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(zoo)
Data = read.csv(file="/Users/ruohanwu/Desktop/IBM.1min.TradesAndQuotes.20160128.csv", sep=",")
data = data.frame("Time" = Data$TimeBarStart)
data$BidPrice = Data$OpenBidPrice
data$AskPrice = Data$OpenAskPrice
data$Avg = (data$BidPrice + data$AskPrice) / 2
length = print(length(data$Avg))
data$MovingAvg_5[6:length] = rollmean(data$Avg, 6)
data$MovingAvg_20[21:length] = rollmean(data$Avg, 21)
Data = read.csv(file="/Users/ruohanwu/Desktop/IBM.1min.TradesAndQuotes.20160128.csv", sep=",")
data = data.frame("Time" = Data$TimeBarStart)
data$BidPrice = Data$OpenBidPrice
data$AskPrice = Data$OpenAskPrice
data$Avg = (data$BidPrice + data$AskPrice) / 2
#length = print(length(data$Avg))
data$MovingAvg_5[6:length] = rollmean(data$Avg, 6)
data$MovingAvg_20[21:length] = rollmean(data$Avg, 21)
# Signal of 1 means go long and Signal of 0 means go short
signal = array(dim = c(length,1))
signal[,1] = 0
for (i in 21:length){
ind1 = (data$MovingAvg_5[i] > data$MovingAvg_20[i]
& data$MovingAvg_5[i-1] <= data$MovingAvg_20[i-1])
ind2 = (data$MovingAvg_5[i] < data$MovingAvg_20[i]
& data$MovingAvg_5[i-1] >= data$MovingAvg_20[i-1])
if (!is.na(ind1) & ind1){
signal[i] = 1
}
if (!is.na(ind2) & ind2){
signal[i] = -1
}
}
data$signal = signal
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(zoo)
Data = read.csv(file="/Users/ruohanwu/Desktop/IBM.1min.TradesAndQuotes.20160128.csv", sep=",")
data = data.frame("Time" = Data$TimeBarStart)
data$BidPrice = Data$OpenBidPrice
data$AskPrice = Data$OpenAskPrice
data$Avg = (data$BidPrice + data$AskPrice) / 2
#length = print(length(data$Avg))
data$MovingAvg_5[6:length] = rollmean(data$Avg, 6)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(zoo)
Data = read.csv(file="/Users/ruohanwu/Desktop/IBM.1min.TradesAndQuotes.20160128.csv", sep=",")
data = data.frame("Time" = Data$TimeBarStart)
data$BidPrice = Data$OpenBidPrice
data$AskPrice = Data$OpenAskPrice
data$Avg = (data$BidPrice + data$AskPrice) / 2
length = length(data$Avg)
data$MovingAvg_5[6:length] = rollmean(data$Avg, 6)
data$MovingAvg_20[21:length] = rollmean(data$Avg, 21)
View(data)
sum(data$Avg[1:20])/20
for (i in 1:20) {}
for (i in 1:20) {}
(for (i in 1:20) {print(sum(data$Avg[1:i])/i)}
}
(for (i in 1:20) {print(sum(data$Avg[1:i])/i)}
)
Data = read.csv(file="/Users/ruohanwu/Desktop/IBM.1min.TradesAndQuotes.20160128.csv", sep=",")
data = data.frame("Time" = Data$TimeBarStart)
data$BidPrice = Data$OpenBidPrice
data$AskPrice = Data$OpenAskPrice
data$Avg = (data$BidPrice + data$AskPrice) / 2
length = length(data$Avg)
data$MovingAvg_5[6:length] = rollmean(data$Avg, 6)
data$MovingAvg_20[21:length] = rollmean(data$Avg, 21)
for (i in 1:20) {
data$MovingAvg_20[i] = sum(data$Avg[1:i])/i
}
for (i in 1:5) {
data$MovingAvg_5[i] = sum(data$Avg[1:i])/i
}
# Signal of 1 means go long and Signal of 0 means go short
signal = array(dim = c(length,1))
signal[,1] = 0
for (i in 21:length){
ind1 = (data$MovingAvg_5[i] > data$MovingAvg_20[i]
& data$MovingAvg_5[i-1] <= data$MovingAvg_20[i-1])
ind2 = (data$MovingAvg_5[i] < data$MovingAvg_20[i]
& data$MovingAvg_5[i-1] >= data$MovingAvg_20[i-1])
if (!is.na(ind1) & ind1){
signal[i] = 1
}
if (!is.na(ind2) & ind2){
signal[i] = -1
}
}
data$signal = signal
#Time to go long
print(data$Time[which(data$signal == 1)])
#Time to go short
print(data$Time[which(data$signal == -1)])
#Time to pass an order (go long or go short)
print(data$Time[which(data$signal == 1 | data$signal == -1)])
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
library(zoo)
Data = read.csv(file="/Users/ruohanwu/Desktop/IBM.1min.TradesAndQuotes.20160128.csv", sep=",")
data = data.frame("Time" = Data$TimeBarStart)
data$BidPrice = Data$OpenBidPrice
data$AskPrice = Data$OpenAskPrice
data$Avg = (data$BidPrice + data$AskPrice) / 2
length = length(data$Avg)
data$MovingAvg_5[6:length] = rollmean(data$Avg, 6)
data$MovingAvg_20[21:length] = rollmean(data$Avg, 21)
# Signal of 1 means go long and Signal of 0 means go short
signal = array(dim = c(length,1))
signal[,1] = 0
for (i in 21:length){
ind1 = (data$MovingAvg_5[i] > data$MovingAvg_20[i]
& data$MovingAvg_5[i-1] <= data$MovingAvg_20[i-1])
ind2 = (data$MovingAvg_5[i] < data$MovingAvg_20[i]
& data$MovingAvg_5[i-1] >= data$MovingAvg_20[i-1])
if (!is.na(ind1) & ind1){
signal[i] = 1
}
if (!is.na(ind2) & ind2){
signal[i] = -1
}
}
data$signal = signal
(for (i in 1:20) {print(i)print(sum(data$Avg[1:i])/i)}
+ )
(for (i in 1:20) {print(i)print(sum(data$Avg[1:i])/i)})
(for (i in 1:20) {print(i,sum(data$Avg[1:i])/i)})
(for (i in 1:20) {print(sum(data$Avg[1:i])/i)})
